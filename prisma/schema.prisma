generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @unique
  products    Product[]
  blogs       Blog[]
}

model Product {
  product_id           String        @id @default(uuid())
  product_name         String
  price                Decimal
  imageUrl             String
  dateAdded            DateTime      @default(now())
  discount             Decimal       @default(0)
  quantity             Int
  nbre_bought           Int           @default(0) // Changed to camelCase
  category             Category      @relation(fields: [categoryId], references: [category_id])
  categoryId           Int
  users                UserProduct[] 
  user                 User?          @relation(fields: [userCreatedProductId], references: [user_id])
  userCreatedProductId String?        @map("user_created_product_id") // Corrected type and name
}

model User {
  user_id         String        @id @default(uuid())
  name            String
  email           String        @unique
  password        String
  products        UserProduct[] 
  searches        UserSearch[] 
  productsCreated Product[]
  isVendor        Boolean       @default(false) // Moved from Product
}

model Search {
  search_id Int          @id @default(autoincrement())
  title     String
  users     UserSearch[] 
}

model UserProduct {
  user      User    @relation(fields: [userId], references: [user_id])
  userId    String
  product   Product @relation(fields: [productId], references: [product_id])
  productId String

  @@id([userId, productId])
}

model UserSearch {
  user     User   @relation(fields: [userId], references: [user_id])
  userId   String
  search   Search @relation(fields: [searchId], references: [search_id])
  searchId Int

  @@id([userId, searchId])
}

model Blog {
  blog_id     String   @id @default(uuid())
  title       String
  body        String
  dateCreated DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [category_id])
  categoryId  Int      @map("category_id") // Standardized to camelCase with mapping
}
