generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id Int       @id @default(autoincrement())
  name        String    @unique
  products    Product[]
  blogs       Blog[]
}

model Product {
  product_id            String      @id @default(uuid())  // Unique identifier for the product (UUID)
  product_name          String      // Name of the product
  price                 Float     // Price of the product
  imageUrl              String      // URL of the product image
  dateAdded             DateTime    @default(now()) // Timestamp of when the product was added
  discount              Float     @default(0)  // Discount applied to the product
  quantity              Int         // Available quantity of the product
  rating                Float?    @default(0)  // Product rating (nullable, default is 0)
  nbre_bought           Int         @default(0)  // Number of times the product has been bought
  category              Category    @relation(fields: [categoryId], references: [category_id]) // Foreign key to Category
  categoryId            Int         // Foreign key to Category table
  users                 UserProduct[]  // Many-to-many relation with users who bought this product
  user                  User        @relation(fields: [userCreatedProductId], references: [user_id])  // Creator of the product
  userCreatedProductId  String      @map("user_created_product_id") // Foreign key (with custom name mapping)
}


model User {
  user_id         String        @id @default(uuid())
  name            String
  email           String        @unique
  password        String
  products        UserProduct[]
  searches        UserSearch[]
  productsCreated Product[]
  avatar          String
  isVendor        Boolean       @default(false) // Moved from Product
}

model Search {
  search_id Int          @id @default(autoincrement())
  title     String
  users     UserSearch[]
}

model UserProduct {
  user      User    @relation(fields: [userId], references: [user_id])
  userId    String
  product   Product @relation(fields: [productId], references: [product_id])
  productId String

  @@id([userId, productId])
}

model UserSearch {
  user     User   @relation(fields: [userId], references: [user_id])
  userId   String
  search   Search @relation(fields: [searchId], references: [search_id])
  searchId Int

  @@id([userId, searchId])
}

model Blog {
  blog_id     String   @id @default(uuid())
  title       String
  body        String
  dateCreated DateTime @default(now())
  category    Category @relation(fields: [categoryId], references: [category_id])
  categoryId  Int      @map("category_id") // Standardized to camelCase with mapping
}
